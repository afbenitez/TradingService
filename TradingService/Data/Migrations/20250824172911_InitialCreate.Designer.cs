// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingService.Data;

#nullable disable

namespace TradingService.Data.Migrations
{
    [DbContext(typeof(TradingDbContext))]
    [Migration("20250824172911_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingService.Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExecutedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("symbol");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer")
                        .HasColumnName("trade_type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedAt")
                        .HasDatabaseName("ix_trades_executed_at");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("ix_trades_symbol");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trades_user_id");

                    b.ToTable("trades", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExecutedAt = new DateTime(2025, 8, 23, 17, 29, 10, 698, DateTimeKind.Utc).AddTicks(8066),
                            Price = 150.50m,
                            Quantity = 100,
                            Status = 2,
                            Symbol = "AAPL",
                            TradeType = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            Id = 2,
                            ExecutedAt = new DateTime(2025, 8, 24, 12, 29, 10, 698, DateTimeKind.Utc).AddTicks(8083),
                            Price = 2800.75m,
                            Quantity = 50,
                            Status = 2,
                            Symbol = "GOOGL",
                            TradeType = 2,
                            UserId = "user2"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
